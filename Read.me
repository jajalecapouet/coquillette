#include <stdio.h>
#include <readline/readline.h>
#include <readline/history.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/time.h>
#include <sys/resource.h>
#include <signal.h>
#include <sys/stat.h>
#include <dirent.h>
#include <errno.h>
#include <string.h>
#include <sys/ioctl.h>
#include <stdlib.h>
#include <termios.h>
#include <curses.h>
#include <term.h>

-- char *readline (const char *prompt);

readline will read a line from the terminal and return it, using
prompt as a prompt.  If prompt is NULL or the empty string, no
prompt is issued.  The line returned is allocated with malloc(3);
the caller must free it when finished.  The line returned has the
final newline removed, so only the text of the line remains.

-- int rl_on_new_line (void)

-- void rl_replace_line (const char *text, int clear_undo)

-- void rl_redisplay (void)

Change what's displayed on the screen to reflect the current
contents of rl_line_buffer.

-- void add_history (const char *string)

-- int access(const char *pathname, int mode);

access() vérifieles droits d'accès à un fichier.
F_OK R_OK, W_OK et X_OK servent à tester respectivement, si le fichier
existe, la lecture, l'écriture et l'exécution du fichier.

L'appel renvoie 0 s'il réussit (toutes les requêtes sont autorisées),
ou -1 s'il échoue (au moins une requête du mode est interdite), auquel
cas errno contient le code d'erreur.  

-- pid_t wait3(int *status, int options, struct rusage *rusage);
-- pid_t wait4(pid_t pid, int *status, int options, struct rusage *rusage);

Les appels système wait3() et wait4()  sont  similaires  à  waitpid(2),
mais  retournent  également  des  informations  sur  l’utilisation  des
ressources par le fils dans la structure pointée par rusage.

L’inclusion de <sys/time.h> n’est plus obligatoire,  mais  améliore  la
portabilité. (En fait, <sys/resource.h> définit la structure rusage qui
contient des champs de type struct timeval, défini dans  <sys/time.h>).

-- int kill(pid_t pid, int sig);   == send signal to a process

-- char *getcwd(char *buf, size_t size);

La fonction getcwd() copie le chemin d'accès absolu du répertoire de travail
courant dans la chaîne pointée par buf, qui est de longueur size.

-- int chdir(const char *path);

chdir() changes the current working directory of the calling
process to the directory specified in path.

-- int stat(const char *restrict pathname, struct stat *restrict statbuf);
-- int fstat(int fd, struct stat *statbuf);
-- int lstat(const char *restrict pathname, struct stat *restrict statbuf);

Ces fonctions renvoient des informations à propos d'un fichier. Aucune
permission n'est nécessaire sur le fichier lui-même, mais vous devez ---
dans le cas de stat() et lstat() --- avoir la permission d'exécution (parcours)
pour tous les répertoires de path qui mènent au fichier.

stat() récupère l'état du fichier pointé par path et remplit le tampon buf.
lstat() donne l'état du lien symbolique lui-même plutôt que celui du fichier visé.
fstat() est identique à stat(), sauf que le fichier ouvert est pointé par le descripteur fd.

struct stat {
    dev_t     st_dev;      /* ID du périphérique contenant le fichier */
    ino_t     st_ino;      /* Numéro inœud */
    mode_t    st_mode;     /* Protection */
    nlink_t   st_nlink;    /* Nb liens matériels */
    uid_t     st_uid;      /* UID propriétaire */
    gid_t     st_gid;      /* GID propriétaire */
    dev_t     st_rdev;     /* ID périphérique (si fichier spécial) */
    off_t     st_size;     /* Taille totale en octets */
    blksize_t st_blksize;  /* Taille de bloc pour E/S */
    blkcnt_t  st_blocks;   /* Nombre de blocs alloués */
    time_t    st_atime;    /* Heure dernier accès */
    time_t    st_mtime;    /* Heure dernière modification */
    time_t    st_ctime;    /* Heure dernier changement état */
};

-- int unlink(const char *pathname);  == delete a name and possibly the file it refers

-- DIR *opendir(const char *name);
-- int closedir(DIR *dirp);
-- struct dirent *readdir(DIR *dirp);

The opendir() function opens a directory stream corresponding to
the directory name, and returns a pointer to the directory
stream.  The stream is positioned at the first entry in the
directory.

A successful call to closedir() also closes the
underlying file descriptor associated with dirp.

The readdir() function returns a pointer to a dirent structure
representing the next directory entry in the directory stream
pointed to by dirp.  It returns NULL on reaching the end of the
directory stream or if an error occurred.

struct dirent {
               ino_t          d_ino;       /* Inode number */
               off_t          d_off;       /* Not an offset; see below */
               unsigned short d_reclen;    /* Length of this record */
               unsigned char  d_type;      /* Type of file; not supported
                                              by all filesystem types */
               char           d_name[256]; /* Null-terminated filename */
           };

-- char *strerror(int errnum);
-- void perror(const char *s);

returnedPID = fork();
if (returnedPID < 0) /* error in the fork call*/
        perror("oopsy, my fork call failed: ");

which will print a line containing my string "oopsy, my fork call
failed: " followed by a standard Unix error message corresponding
to the value in errno, e.g., "Out of memory". If I can't figure out
my problem from that message (about 70% of the time I can), at least
I probably get some good key words and phrases I can search the web
for more help with.

strerror is similar to perror but just returns the actual string
corresponding to the error number you feed it manually and then you
have to print it yourself.  Here's how I've sometimes used it:

if (fd == -1)
	printf(" Damn: %s", strerror(someErrorCode) );

-- int isatty(int fd);  == test whether a file descriptor refers to a terminal
-- char *ttyname(int fd);  == return name of a terminal
-- int ttyslot(void);   == find the slot of the current user's terminal in some file
https://man7.org/linux/man-pages/man3/ttyslot.3.html

-- int ioctl(int fd, unsigned long request, ...);  == Contrôler les périphériques
#include <sys/ioctl.h>
http://manpages.ubuntu.com/manpages/bionic/fr/man2/ioctl.2.html 

-- char *getenv(const char *name);

The getenv() function searches the environment list to find the
environment variable name, and returns a pointer to the
corresponding value string.

-- int tcsetattr(int fd, int optional_actions, const struct termios *termios_p);
-- int tcgetattr(int fd, struct termios *termios_p);
https://man7.org/linux/man-pages/man3/tcsetattr.3p.html

-- int tgetent(char *bp, const char *name);
https://zestedesavoir.com/tutoriels/1733/termcap-et-terminfo/ 
Cette fonction prend en premier paramètre l’adresse d’un buffer dans
lequel stocker les informations utiles au fonctionnement interne de
Termcap et en second paramètre le nom / le type de votre terminal.
Termcap a besoin de connaitre le type de terminal sur lequel j'exécute mon programme.

-- int tgetflag(char *id);
renvoie un booléen
Cette fonction est utilisée pour vérifier les capacités d’un terminal,
savoir s’il est capable de faire tel ou tel action.
If the capability name is present in the terminal description,
tgetflag returns 1; otherwise, it returns 0.

-- int tgetnum(char *id);
tgetnum permet de récupérer des informations numériques en rapport avec votre terminal.
Comme par exemple le nombre de lignes et de colonnes.

-- char *tgetstr(char *id, char **area);
C’est elle qui permet de récupérer les fameux termcaps sous la forme d’une séquence
d’échappement ! On peut par exemple récupérer le termcap « cl » (pour clean) qui
permet de nettoyer (vider) un terminal.
http://manpages.ubuntu.com/manpages/bionic/man5/termcap.5.html 

-- char *tgoto(const char *cap, int col, int row);
The special case of cursor motion is handled by tgoto.

-- int tputs(const char *str, int affcnt, int (*putc)(int));
tputs est la fonction qui marche de pair avec tgetstr, c’est elle qui va se charger
d’exécuter le termcap que l’on vient de récupérer.
Le premier argument de tputs correspond bien évidement au termcap à exécuter,
le second au nombre de lignes affectées et le troisième à un pointeur de fonction
pour afficher le contenu du termcap (putchar fera amplement l’affaire).
https://www.gnu.org/software/termutils/manual/termcap-1.3/html_chapter/termcap_2.html
https://www.gnu.org/software/termutils/manual/termcap-1.3/html_chapter/termcap_4.html#SEC23
